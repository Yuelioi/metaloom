// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class DirectoryContent {
    "folders": Folder[];
    "images": Image[];

    /** Creates a new DirectoryContent instance. */
    constructor($$source: Partial<DirectoryContent> = {}) {
        if (!("folders" in $$source)) {
            this["folders"] = [];
        }
        if (!("images" in $$source)) {
            this["images"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DirectoryContent instance from a string or object.
     */
    static createFrom($$source: any = {}): DirectoryContent {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("folders" in $$parsedSource) {
            $$parsedSource["folders"] = $$createField0_0($$parsedSource["folders"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField1_0($$parsedSource["images"]);
        }
        return new DirectoryContent($$parsedSource as Partial<DirectoryContent>);
    }
}

export class Field {
    "key": string;
    "value": string;

    /** Creates a new Field instance. */
    constructor($$source: Partial<Field> = {}) {
        if (!("key" in $$source)) {
            this["key"] = "";
        }
        if (!("value" in $$source)) {
            this["value"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Field instance from a string or object.
     */
    static createFrom($$source: any = {}): Field {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Field($$parsedSource as Partial<Field>);
    }
}

export class Folder {
    "name": string;
    "path": string;

    /** Creates a new Folder instance. */
    constructor($$source: Partial<Folder> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Folder instance from a string or object.
     */
    static createFrom($$source: any = {}): Folder {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Folder($$parsedSource as Partial<Folder>);
    }
}

export class Image {
    "name": string;
    "path": string;

    /**
     * 字节数
     */
    "size": number;

    /**
     * 缩略图
     */
    "thumbnail": string;

    /**
     * 是否有元数据
     */
    "hasMetadata": boolean;

    /**
     * 图片尺寸
     */
    "dimensions": string;

    /** Creates a new Image instance. */
    constructor($$source: Partial<Image> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }
        if (!("size" in $$source)) {
            this["size"] = 0;
        }
        if (!("thumbnail" in $$source)) {
            this["thumbnail"] = "";
        }
        if (!("hasMetadata" in $$source)) {
            this["hasMetadata"] = false;
        }
        if (!("dimensions" in $$source)) {
            this["dimensions"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Image instance from a string or object.
     */
    static createFrom($$source: any = {}): Image {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Image($$parsedSource as Partial<Image>);
    }
}

export class Metadata {
    "title": string;
    "description": string;
    "tags": string[];
    "fields": Field[];

    /** Creates a new Metadata instance. */
    constructor($$source: Partial<Metadata> = {}) {
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("tags" in $$source)) {
            this["tags"] = [];
        }
        if (!("fields" in $$source)) {
            this["fields"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Metadata instance from a string or object.
     */
    static createFrom($$source: any = {}): Metadata {
        const $$createField2_0 = $$createType4;
        const $$createField3_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("tags" in $$parsedSource) {
            $$parsedSource["tags"] = $$createField2_0($$parsedSource["tags"]);
        }
        if ("fields" in $$parsedSource) {
            $$parsedSource["fields"] = $$createField3_0($$parsedSource["fields"]);
        }
        return new Metadata($$parsedSource as Partial<Metadata>);
    }
}

export class NavigationItem {
    "name": string;
    "path": string;

    /**
     * "drive", "folder"
     */
    "type": string;
    "icon": string;
    "children"?: NavigationItem[];
    "expanded": boolean;

    /** Creates a new NavigationItem instance. */
    constructor($$source: Partial<NavigationItem> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = "";
        }
        if (!("icon" in $$source)) {
            this["icon"] = "";
        }
        if (!("expanded" in $$source)) {
            this["expanded"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NavigationItem instance from a string or object.
     */
    static createFrom($$source: any = {}): NavigationItem {
        const $$createField4_0 = $$createType8;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("children" in $$parsedSource) {
            $$parsedSource["children"] = $$createField4_0($$parsedSource["children"]);
        }
        return new NavigationItem($$parsedSource as Partial<NavigationItem>);
    }
}

// Private type creation functions
const $$createType0 = Folder.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = Image.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $Create.Array($Create.Any);
const $$createType5 = Field.createFrom;
const $$createType6 = $Create.Array($$createType5);
const $$createType7 = NavigationItem.createFrom;
const $$createType8 = $Create.Array($$createType7);
